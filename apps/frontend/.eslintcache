[{"/home/wsl-tom/git/side-projects/2d-shooter-2020/frontend/src/index.tsx":"1","/home/wsl-tom/git/side-projects/2d-shooter-2020/frontend/src/App.tsx":"2","/home/wsl-tom/git/side-projects/2d-shooter-2020/frontend/src/inputSystem.ts":"3","/home/wsl-tom/git/side-projects/2d-shooter-2020/frontend/src/constants/keybinds.ts":"4","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/index.tsx":"5","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/constants/keybinds.ts":"6","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/Simulator.ts":"7","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/PhaserEntityRenderer.ts":"8","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/InputSystem.ts":"9","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/game/Main.tsx":"10","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/scenes/main-scene.ts":"11","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/scenes/level-one.ts":"12","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/game/index.ts":"13","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/app/store.ts":"14","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/app/hooks.ts":"15","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/toolbar/toolbarSlice.ts":"16","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/toolbar/Toolbar.tsx":"17","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/gameinfo/gameInfoSlice.ts":"18","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/gameinfo/GameInfo.tsx":"19","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/playerhud/playerHUDSlice.ts":"20","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/playerhud/PlayerHUD.tsx":"21","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/debugbar/debugbarSlice.ts":"22","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/debugbar/DebugBar.tsx":"23","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/index.tsx":"24","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/app/store.ts":"25","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/game/Main.tsx":"26","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/features/toolbar/Toolbar.tsx":"27","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/features/debugbar/DebugBar.tsx":"28","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/features/playerhud/PlayerHUD.tsx":"29","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/features/toolbar/toolbarSlice.ts":"30","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/features/playerhud/playerHUDSlice.ts":"31","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/features/debugbar/debugbarSlice.ts":"32","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/app/hooks.ts":"33","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/game/index.ts":"34","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/scenes/level-one.ts":"35","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/Simulator.ts":"36","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/InputSystem.ts":"37","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/PhaserEntityRenderer.ts":"38","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/features/playerhud/GameStatusHUD.tsx":"39"},{"size":197,"mtime":1610800520788,"results":"40","hashOfConfig":"41"},{"size":12240,"mtime":1611507850330,"results":"42","hashOfConfig":"41"},{"size":994,"mtime":1610809232450,"results":"43","hashOfConfig":"41"},{"size":463,"mtime":1608673148839,"results":"44","hashOfConfig":"41"},{"size":665,"mtime":1627331303730,"results":"45","hashOfConfig":"46"},{"size":463,"mtime":1612009952096,"results":"47","hashOfConfig":"48"},{"size":7742,"mtime":1635406340090,"results":"49","hashOfConfig":"46"},{"size":5786,"mtime":1633786877850,"results":"50","hashOfConfig":"46"},{"size":3714,"mtime":1628343411762,"results":"51","hashOfConfig":"46"},{"size":1482,"mtime":1635362838060,"results":"52","hashOfConfig":"46"},{"size":5865,"mtime":1633783494370,"results":"53","hashOfConfig":"46"},{"size":4637,"mtime":1635406454140,"results":"54","hashOfConfig":"46"},{"size":358,"mtime":1635362738260,"results":"55","hashOfConfig":"46"},{"size":736,"mtime":1628339619762,"results":"56","hashOfConfig":"46"},{"size":349,"mtime":1620675474440,"results":"57","hashOfConfig":"46"},{"size":1048,"mtime":1628339806972,"results":"58","hashOfConfig":"46"},{"size":990,"mtime":1620930256700,"results":"59","hashOfConfig":"46"},{"size":941,"mtime":1621285225050,"results":"60","hashOfConfig":"46"},{"size":994,"mtime":1621286250010,"results":"61","hashOfConfig":"46"},{"size":899,"mtime":1624482369650,"results":"62","hashOfConfig":"46"},{"size":1425,"mtime":1621288388820,"results":"63","hashOfConfig":"46"},{"size":824,"mtime":1628339807972,"results":"64","hashOfConfig":"46"},{"size":783,"mtime":1628793054044,"results":"65","hashOfConfig":"46"},{"size":681,"mtime":1635425455230,"results":"66","hashOfConfig":"67"},{"size":639,"mtime":1635425686830,"results":"68","hashOfConfig":"67"},{"size":1482,"mtime":1635407366320,"results":"69","hashOfConfig":"67"},{"size":990,"mtime":1635407366320,"results":"70","hashOfConfig":"67"},{"size":783,"mtime":1635407366320,"results":"71","hashOfConfig":"67"},{"size":869,"mtime":1635427470440,"results":"72","hashOfConfig":"67"},{"size":1048,"mtime":1635407366320,"results":"73","hashOfConfig":"67"},{"size":958,"mtime":1635426102030,"results":"74","hashOfConfig":"67"},{"size":824,"mtime":1635407366320,"results":"75","hashOfConfig":"67"},{"size":349,"mtime":1635407366320,"results":"76","hashOfConfig":"67"},{"size":358,"mtime":1635407366320,"results":"77","hashOfConfig":"67"},{"size":4598,"mtime":1635419492640,"results":"78","hashOfConfig":"67"},{"size":6499,"mtime":1635427501900,"results":"79","hashOfConfig":"67"},{"size":3714,"mtime":1635407366320,"results":"80","hashOfConfig":"67"},{"size":5643,"mtime":1635420503700,"results":"81","hashOfConfig":"67"},{"size":943,"mtime":1635425746210,"results":"82","hashOfConfig":"67"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},"1ouzttf",{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"ghla1v",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4mqxxv",{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"94"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"94"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"94"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"94"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"94"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"94"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"94"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"94"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"94"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"94"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},"ljr3s8",{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"145"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"145"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"145"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"145"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"145"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"145"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},"/home/wsl-tom/git/side-projects/2d-shooter-2020/frontend/src/index.tsx",[],["177","178"],"/home/wsl-tom/git/side-projects/2d-shooter-2020/frontend/src/App.tsx",["179"],"/home/wsl-tom/git/side-projects/2d-shooter-2020/frontend/src/inputSystem.ts",["180"],"/home/wsl-tom/git/side-projects/2d-shooter-2020/frontend/src/constants/keybinds.ts",[],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/index.tsx",[],["181","182"],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/constants/keybinds.ts",[],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/Simulator.ts",["183","184","185"],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/PhaserEntityRenderer.ts",["186","187"],"\nimport nengi from 'nengi'\nimport PlayerGraphicClient from '../../common/graphics/PlayerGraphicClient'\nimport BotGraphicClient from '../../common/graphics/BotGraphicClient'\nimport { entityTypes, messageTypes } from '../../common/types/types'\nimport { SCENE_NAMES } from './game/index'\nimport BulletGraphicClient from '../../common/graphics/BulletGraphicClient'\nimport ZombieWaveMessage from '../../common/message/ZombieWaveMessage'\nimport ClientHudMessage from '../../common/message/ClientHudMessage'\n\nclass PhaserEntityRenderer {\n\n    entities: Map<number, any>\n    scene: Phaser.Scene\n    myId: string\n    myEntity: Phaser.GameObjects.Sprite\n    sceneMap: Phaser.Tilemaps.Tilemap\n\n    healthText: Phaser.GameObjects.Text\n    waveInfoText: Phaser.GameObjects.Text\n    hudText: Phaser.GameObjects.Text\n    stageText: Phaser.GameObjects.Text\n\n    constructor(scene: Phaser.Scene, sceneMap: Phaser.Tilemaps.Tilemap ) {\n        this.scene = scene\n        this.entities = new Map()\n        this.sceneMap = sceneMap\n    }\n\n    createEntity(entity: any) {\n        console.log(`creating new ${entity.protocol.name} entity ( Renderer )`)\n\n        if (entity.protocol.name === entityTypes.PLAYER_ENTITY) {\n            const clientEntity = new PlayerGraphicClient(this.scene, entity.x, entity.y)\n            this.scene.add.existing(clientEntity)\n            this.entities.set(entity.nid, clientEntity)\n\n            // We may already have an identity ID assigned, in which case follow at point of recieving entity\n            // otherwise we'll follow once we recieve ENTITY\n            if (entity.nid === this.myId) {\n                this.myEntity = clientEntity\n                this.setupCamera()\n            }\n        }\n\n        if (entity.protocol.name === entityTypes.BOT_ENTITY) {\n            const botEntity = new BotGraphicClient(this.scene, entity.x, entity.y)\n            this.scene.add.existing(botEntity)\n            this.entities.set(entity.nid, botEntity)\n        }\n\n        if (entity.protocol.name === entityTypes.BULLET_ENTITY) {\n            const bulletEntity = new BulletGraphicClient(this.scene, entity.x, entity.y)\n            this.scene.add.existing(bulletEntity)\n            this.entities.set(entity.nid, bulletEntity)\n        }\n\n    }\n\n    // We may already recieve identity AFTER recieving entities, in which case follow at point of recieving entity\n    assignClientEntity(entityId: number) {\n\n        let clientEntity = this.entities.get(entityId)\n        this.myEntity = clientEntity\n        this.setupCamera()\n    }\n\n    setupCamera() {\n        const camera = this.scene.cameras.main;\n        camera.startFollow(this.myEntity, true, 0.1, 0.1);\n\n        camera.setBounds(0, 0, this.sceneMap.widthInPixels, this.sceneMap.heightInPixels);\n        camera.zoom= 1\n    }\n\n    updateEntity(update: any) {\n        const entity = this.entities.get(update.nid)\n        entity[update.prop] = update.value\n        // debugger\n    }\n\n    deleteEntity(entityId: number) {\n        const entity = this.entities.get(entityId)\n\n        if (entity) {\n            entity.destroy()\n            this.entities.delete(entityId)\n        } else {\n            console.log(`Rendered tried to delete entity ${entityId} that doesn't exist `)\n        }\n    }\n\n    deleteAllEntities(entityId: number) {\n        const entity = this.entities.get(entityId)\n\n        if (entity) {\n            entity.destroy()\n            this.entities.delete(entityId)\n        } else {\n            console.log(`Rendered tried to delete entity ${entityId} that doesn't exist `)\n        }\n    }\n\n    processMessage(message: any) {\n        if (message.protocol.name === messageTypes.IDENTITY) {\n            // Use this to track camera against the correct entity\n            this.myId = message.entityId\n            console.log('Assigned my remote entity ID as ', this.myId)\n        }\n    }\n\n    getMouseCoords() {\n        const pointer = this.scene.input.activePointer\n\n        return {\n            mouseX: pointer.worldX,\n            mouseY: pointer.worldY,\n        }\n\n    }\n\n    displayText(text: string) {\n        const textStyle:any = {\n            fill: \"#ffffff\",\n            align: \"center\",\n            fontSize: 30,\n            fontStyle: \"bold\"\n        };\n\n        const width = Number(this.scene.game.config.width);\n        const height = Number(this.scene.game.config.height);\n\n        if (!this.stageText) {\n            this.stageText = this.scene.add\n                .text(width / 2, height / 2 + 250, text, textStyle)\n                .setOrigin(0.5, 0);\n        } else {\n            this.stageText.text = text\n        }\n\n        // const loadingBar = this.scene.add.graphics();\n        // loadingBar.clear();\n        // loadingBar.fillStyle(0xffffff, 1);\n        // loadingBar.fillRect(width / 2 - 375, height / 2 - 25, 750 * value, 50);\n        // const mod = Phaser.Math.FloorTo(((value * 100) % 3) + 1, 0);\n        // const text = `Loading${\".\".repeat(mod)}${mod <= 2 ? \" \".repeat(3 - mod) : \"\"}`;\n\n    }\n\n    loadLevel(fromScene: string, toScene:string, nengiClient: nengi.Client) {\n\n        const from = fromScene as SCENE_NAMES\n        const to = toScene as SCENE_NAMES\n\n        if (\n            !Object.values(SCENE_NAMES).includes(from) ||\n            !Object.values(SCENE_NAMES).includes(to)\n        ) {\n            console.warn(`Unable to find scene ${from}, ${to}`)\n        } else {\n            // debugger\n\n            if (SCENE_NAMES[from] === SCENE_NAMES.MAIN) {\n                this.scene.scene.sleep(SCENE_NAMES[from])\n                this.scene.scene.run(SCENE_NAMES[to], { nengiClient })\n            } else {\n                this.scene.scene.sleep(SCENE_NAMES[from])\n                this.scene.scene.run(SCENE_NAMES[to])\n            }\n        }\n    }\n\n}\n\nexport default PhaserEntityRenderer\n","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/InputSystem.ts",[],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/game/Main.tsx",["188"],"import nengi from \"nengi\";\nimport { clientFPS, phaserGameConfig } from \"../../../common/config/phaserConfig\";\nimport { installScenes } from \".\";\nimport {SCENE_NAMES} from \"../../../common/types/types\"\nimport nengiConfig from \"../../../common/config/nengiConfig\";\nimport { ExtendedNengiTypes } from \"../../../common/types/custom-nengi-types\";\nimport { store } from '../app/store';\n\nexport const newGame = () => {\n\n    const gameConfig: Phaser.Types.Core.GameConfig = {\n        ...phaserGameConfig,\n        type: Phaser.AUTO,\n        width: window.innerWidth,\n        height: window.innerHeight,\n        // fps: {\n        //     target: clientFPS,\n        //     forceSetTimeOut: true,\n        // },\n        parent: \"game-here\",\n        // scene: MainScene,\n    };\n\n        // a very hackie trick to pass some custom data\n    // but it work well :)\n    const nengiClient = new nengi.Client(\n        nengiConfig,\n        100\n    ) as ExtendedNengiTypes.Client;\n\n    // gameConfig.callbacks = {\n    //     preBoot: () => {\n    //     return { nengiClient };\n    //     }\n    // };\n\n    const phaserGame = new Phaser.Game(gameConfig);\n\n    // Add scenes to our game for later (loading, menu, main, and settings)\n    installScenes(phaserGame);\n\n    phaserGame.scene.start(SCENE_NAMES.LEVEL_ONE, {nengiClient, storeRef: store})\n    return phaserGame\n};\n\nconst phaserGame = newGame()\n\nconst Main = () => {\n    return <div id=\"game-here\"></div>;\n};\n\nexport {phaserGame}\nexport default Main;\n","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/scenes/main-scene.ts",["189","190"],"import nengi from \"nengi\";\nimport Phaser from \"phaser\";\nimport nengiConfig from \"../../../common/config/nengiConfig\";\nimport { ExtendedNengiTypes } from \"../../../common/types/custom-nengi-types\";\nimport Simulator from \"../Simulator\";\nimport RequestJoinGame from '../../../common/command/RequestJoinGame'\nimport ModifyToolbarCommand from '../../../common/command/ModifyToolbarCommand'\nimport RequestRunDebugCommand from '../../../common/command/RequestRunDebugCommand'\nimport { store } from '../app/store'\nimport { REQUEST_DEBUG_COMMAND_TYPES } from \"../../../common/types/types\";\n// const sceneConfig: Phaser.Types.Scenes.SettingsConfig = {\n//   active: false,\n//   visible: false,\n//   key: \"Game\",\n// };\n\nexport class MainScene extends Phaser.Scene {\n  map: Phaser.Tilemaps.Tilemap;\n  worldLayer: Phaser.Tilemaps.StaticTilemapLayer;\n  nengiClient: ExtendedNengiTypes.Client;\n  simulator: Simulator;\n  last_ts: number\n\n  levelName = \"spawn_island\";\n  store: typeof store\n  oldState:  ReturnType<typeof store.getState>\n\n  init({ nengiClient, storeRef }: { nengiClient: any, storeRef: typeof store }) {\n    console.log(\"RUNNING INIT MAIN\")\n\n    // super({});\n    this.nengiClient = nengiClient;\n    // try {\n    //     // @ts-ignore\n    //     const { nengiClient } = nengiClient;\n    //     this.nengiClient = nengiClient;\n\n    // } catch (e) {\n    //     console.log(\"Error extracting preBoot data\", e);\n    // }\n\n    // const client = new nengi.Client(\n    //   nengiConfig,\n    //   100\n    // ) as ExtendedNengiTypes.Client;\n    // this.nengiClient = client;\n\n      // Start listening for changes\n      // debugger\n    this.store = storeRef\n    this.store.subscribe(() => this.stateUpdated())\n\n\n  }\n\n  stateUpdated() {\n    // console.log(\"stat eupdated\")\n    const newState = this.store.getState()\n    console.log(newState)\n    // Do we need to make changes?\n\n    // if (!this.oldState) {\n    //   const ModToolbarCommand = new ModifyToolbarCommand(newState.toolbar.selectedSlot)\n    //   this.nengiClient.addCommand(ModToolbarCommand)\n\n    // } else {\n        if (this.oldState?.toolbar?.selectedSlot && this.oldState.toolbar.selectedSlot !== newState.toolbar.selectedSlot) {\n          const ModToolbarCommand = new ModifyToolbarCommand(newState.toolbar.selectedSlot)\n          this.nengiClient.addCommand(ModToolbarCommand)\n        }\n        if (this.oldState?.debugBar?.killFlag && this.oldState?.debugBar?.killFlag  !== newState.debugBar.killFlag) {\n          const requestRunDebugCommand = new RequestRunDebugCommand(REQUEST_DEBUG_COMMAND_TYPES.KILL)\n          this.nengiClient.addCommand(requestRunDebugCommand)\n        }\n    // }\n    // Trigger UIActions, then empty the actions array\n\n    // const ModToolbarCommand = new ModifyToolbarCommand(newState.toolbar.selectedSlot)\n    // this.nengiClient.addCommand(ModToolbarCommand)\n\n    // Optimise later - you'll alwayhs need to do atleast 1 action this way\n    // if (this.oldState.toolbar.selectedSlot !== newState.toolbar.selectedSlot) {\n    //   const ModToolbarCommand = new ModifyToolbarCommand(newState.toolbar.selectedSlot)\n    //   this.nengiClient.addCommand(ModToolbarCommand)\n    //   debugger\n    // }\n\n    this.oldState = newState\n\n\n  }\n\n\n  public preload() {\n    console.log(\"RUNNING PRELOAD MAIN\")\n\n    this.load.image(\"player\", \"survivor-shotgun.png\");\n\n    this.load.image(\"tiles\", \"tuxmon-sample-32px-extruded.png\");\n    this.load.tilemapTiledJSON(this.levelName, this.levelName + \".json\");\n  }\n\n  public create(data: any) {\n\n    console.log(\"RUNNING CREATE MAIN\")\n    this.map = this.make.tilemap({ key: this.levelName });\n\n    const tileset = this.map.addTilesetImage(\n      \"tuxmon-sample-32px-extruded\",\n      \"tiles\"\n    );\n\n    //@ts-ignore\n    this.map.createStaticLayer(\n      \"Below Player\",\n      tileset,\n      0,\n      0\n    );\n\n    //@ts-ignore\n\n    this.worldLayer = this.map.createStaticLayer(\"World\", tileset, 0, 0);\n    // this.worldLayer.setCollisionByProperty({ collides: true });\n\n    // ------------ NENGI ------------------//\n\n    this.simulator = new Simulator(this.nengiClient, this, this.map);\n\n    // this.simulator.deleteAllEntities()\n\n    this.nengiClient.onConnect((res) => {\n      console.log(\"onConnect response:\", res);\n    });\n\n    this.nengiClient.onClose(() => {\n      console.log(\"connection closed\");\n    });\n\n    this.nengiClient.on(\"connected\", (res) => {\n      console.log(\"connection?:\", res);\n    });\n    this.nengiClient.on(\"disconnected\", () => {\n      console.log(\"connection closed\");\n    });\n\n    this.nengiClient.connect(\"ws://localhost:8079\");\n\n    // console.log(\"Requesting to join game in 5 seconds\")\n\n    console.log(\"Requesting to join game\")\n    const RequestJoinGameCommand = new RequestJoinGame(\"\")\n    this.nengiClient.addCommand(RequestJoinGameCommand)\n\n  }\n\n  public update() {\n\n    // console.log(\"MAIN TICK RUNNINGad\")\n    // Compute delta time since last update.\n    const now_ts = +new Date();\n    const last_ts = this.last_ts || now_ts;\n    const dt_sec = (now_ts - last_ts) / 1000.0;\n    this.last_ts = now_ts;\n\n    const network = this.nengiClient.readNetwork();\n\n    network.entities.forEach((snapshot: any) => {\n      snapshot.createEntities.forEach((entity: any) => {\n        console.log(`creating new ${entity.protocol.name} entity `, entity)\n        this.simulator.createEntity(entity)\n      })\n\n      snapshot.updateEntities.forEach((update: any) => {\n\n        this.simulator.updateEntity(update)\n      })\n\n      snapshot.deleteEntities.forEach((id: number) => {\n        console.log(`Deleting entity `, id)\n        this.simulator.deleteEntity(id)\n      })\n    })\n\n    network.messages.forEach((message: any) => {\n      console.log(`Recieved ${message.protocol.name} message:`, message);\n      this.simulator.processMessage(message)\n    });\n\n    this.simulator.update(dt_sec);\n    this.nengiClient.update();\n  }\n}\n",["191","192"],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/scenes/level-one.ts",["193","194"],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/game/index.ts",[],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/app/store.ts",[],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/app/hooks.ts",[],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/toolbar/toolbarSlice.ts",["195","196","197","198"],"import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\n\nexport interface Toolbar {\n  selectedSlot: number;\n  slotData: ToolbarSlot[];\n}\n\ntype ToolbarSlot = {\n    name: string;\n    image: string;\n}\n\nconst initialState: Toolbar = {\n  selectedSlot: 0,\n    slotData: [\n        {\n            name: \"pistol\", image: \"./toolbar-pistol.png\"\n        },\n        {\n            name: \"smg\", image: \"./toolbar_smg.png\"\n        },\n        {\n            name: \"\", image: \"\"\n        },\n        {\n            name: \"\", image: \"\"\n        },\n    ],\n};\n\nexport const toolbarSlice = createSlice({\n  name: 'toolbar',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    changeSlot: (state, action) => {\n      state.selectedSlot = action.payload;\n    },\n  },\n});\n\nexport const { changeSlot } = toolbarSlice.actions;\n\nexport const changeToSlot = (index: number) => {\n    changeSlot(index)\n}\n\nexport default toolbarSlice.reducer;","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/toolbar/Toolbar.tsx",["199"],"import React, { useState } from \"react\";\n\nimport { useAppSelector, useAppDispatch } from \"../../app/hooks\";\nimport { changeSlot } from \"./toolbarSlice\";\n\nexport function Toolbar() {\n  const selectedSlot = useAppSelector((state) => state.toolbar.selectedSlot);\n  const slotData = useAppSelector((state) => state.toolbar.slotData);\n\n  const dispatch = useAppDispatch();\n\n  return (\n    <div className=\"flex p-2 fixed bottom-2 left-2 select-none\">\n      {slotData.map((data, index) => {\n        return (\n            <div className={`\n                m-1 border-2 bg-opacity-50 ${selectedSlot === index ? \"border-white border-4 bg-gray-200\" : \"border-grey bg-gray-600\"}\n            `}>\n            <div style={{ backgroundImage:`url(${data.image})` }} className=\"h-20 w-20 bg-center\" onClick={() => dispatch(changeSlot(index))}>\n                    {/* <img src={data.image} alt=\"\" className=\"object-cover\" /> */}\n                </div>\n\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/gameinfo/gameInfoSlice.ts",["200","201","202"],"import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport ZombieWaveMessage from '../../../../common/message/ZombieWaveMessage';\nimport { RootState, AppThunk } from '../../app/store';\n\nexport interface GameInfo extends ZombieWaveMessage{}\n\nconst initialState: GameInfo = {\n  currentWave: 0,\n  waveSize: 0,\n  zombiesRemaining: 0,\n  zombiesKilled: 0,\n  zombiesAlive: 0,\n  playersAlive: 0,\n  playersTotal: 0,\n  gameStatus : \"N/A\"\n};\n\n\nexport const gameInfoSlice = createSlice({\n  name: 'gameinfo',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    updateGameInfo: (state, action: PayloadAction<GameInfo>) => {\n      return {...state, ...action.payload}\n    },\n  },\n});\n\nexport const { updateGameInfo } = gameInfoSlice.actions;\n\n// export const changeToSlot = (index: number) => {\n//     changeSlot(index)\n// }\n\nexport default gameInfoSlice.reducer;","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/gameinfo/GameInfo.tsx",["203","204"],"import React, { useState } from \"react\";\n\nimport { useAppSelector, useAppDispatch } from \"../../app/hooks\";\n\nexport function GameInfo() {\n  const gameInfo = useAppSelector((state) => state.gameInfo);\n\n  return (\n    <div className=\"text-white flex-col p-2 fixed top-2 left-2 w-80 select-none bg-opacity-50 border-grey bg-gray-600 m-1 border-2\">\n      {/* {gameInfo.currentWave} */}\n      <div className=\"p-2 border-bottom border-gray-600\">\n        Game State : {gameInfo.gameStatus}\n      </div>\n      <div className=\"p-2 border-bottom border-gray-600\">\n        Zombies Remaining : {gameInfo.zombiesRemaining}\n      </div>\n      <div className=\"p-2 border-bottom border-gray-600\">\n        Zombies Killed : {gameInfo.zombiesKilled}\n      </div>\n      <div className=\"p-2 border-bottom border-gray-600\">\n        Zombies Alive : {gameInfo.zombiesAlive}\n      </div>\n      <div className=\"p-2 border-bottom border-gray-600\">\n        Players : {gameInfo.playersAlive}\n      </div>\n    </div>\n  );\n}\n","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/playerhud/playerHUDSlice.ts",["205","206","207"],"import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport ClientHudMessage from '../../../../common/message/ClientHudMessage';\nimport { RootState, AppThunk } from '../../app/store';\n\nexport interface PlayerHUD extends ClientHudMessage{}\n\nconst initialState: PlayerHUD = {\n   health: 100,\n   ammo: \"\",\n   gunName: \"\",\n};\n\n\nexport const playerHUDSlice = createSlice({\n  name: 'gameinfo',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    updatePlayerHUD: (state, action: PayloadAction<PlayerHUD>) => {\n\n      console.log({action})\n      return {\n        ammo: action.payload.ammo,\n        gunName: action.payload.gunName,\n        health: action.payload.health,\n        // ...state,\n      }\n    },\n  },\n});\n\nexport const { updatePlayerHUD } = playerHUDSlice.actions;\n\nexport default playerHUDSlice.reducer;","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/playerhud/PlayerHUD.tsx",["208","209"],"import React, { useState } from \"react\";\n\nimport { useAppSelector, useAppDispatch } from \"../../app/hooks\";\n\nexport function PlayerHUD() {\n  const playerHud = useAppSelector((state) => state.playerHUD);\n\n  let className=\"bg-green-500 bg-opacity-30 \"\n\n  if (playerHud.health >30 && playerHud.health <70) {\n    className=\"bg-yellow-500 bg-opacity-30 \"\n  }\n\n  if (playerHud.health <30) {\n    className=\"bg-red-500 bg-opacity-30 \"\n\n  }\n\n  return (\n    <div className=\"text-white fixed bottom-2 right-2 w-80 select-none bg-opacity-50 border-grey bg-gray-600 m-1 border-2\">\n      {/* <div className=\"shadow w-full bg-grey-light mt-2\"> */}\n      <span className=\"text-xs font-semibold py-1 px-2 uppercase rounded-full text-amber-600 bg-amber-200\">\n            Health\n          </span>\n      <div style={{ width: playerHud.health + \"%\" }} className={`${className} text-xs leading-none py-1 text-center text-white`}>\n          {playerHud.health}\n        {/* </div> */}\n      </div>\n\n      {/* <div className=\"relative pt-1\">\n        <div className=\"flex mb-2 items-center justify-between\">\n          <div>\n            <span className=\"text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-amber-600 bg-amber-200\">\n              Health\n            </span>\n          </div>\n          <div className=\"overflow-hidden h-2 mb-4 text-xs flex rounded bg-amber-200\"></div>\n        </div>\n      </div> */}\n    </div>\n  );\n}\n","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/debugbar/debugbarSlice.ts",["210","211","212","213"],"import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\n\nexport interface DebugBar {\n  debugInfo: number;\n  killFlag: boolean;\n}\n\nconst initialState: DebugBar = {\n  debugInfo: 0,\n  killFlag: false,\n};\n\nexport const debugBarSlice = createSlice({\n  name: 'debugSlice',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n\n    clickKillButton: (state, action) => {\n      state.killFlag = !state.killFlag;\n    },\n  },\n});\n\nexport const {clickKillButton } = debugBarSlice.actions;\n\n// export const changeToSlot = (index: number) => {\n//     changeDebugInfo(index)\n// }\n\n// export const clickKillButtonActtion = () => {\n//   clickKillButton(true)\n// }\n\nexport default debugBarSlice.reducer;","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-port/frontend/src/features/debugbar/DebugBar.tsx",["214","215"],"import React, { useState } from \"react\";\n\nimport { useAppSelector, useAppDispatch } from \"../../app/hooks\";\nimport { clickKillButton } from \"./debugbarSlice\";\n\nexport function DebugBar() {\n  const debuggerInfo = useAppSelector((state) => state.debugBar);\n\n  const dispatch = useAppDispatch();\n\n  return (\n    <div className=\"text-white flex-col p-2 fixed top-80 left-2 w-80 select-none bg-opacity-50 border-grey bg-gray-600 m-1 border-2\">\n      <button\n              type=\"button\"\n              className=\"w-full inline-flex justify-center rounded-md border focus:ring-1 focus:ring-offset-1 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm\"\n              onClick={() => { dispatch(clickKillButton(true)) }}\n            >\n              Test\n            </button>\n\n    </div>\n  );\n}\n","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/index.tsx",[],["216","217"],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/app/store.ts",[],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/game/Main.tsx",["218"],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/features/toolbar/Toolbar.tsx",["219"],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/features/debugbar/DebugBar.tsx",["220","221"],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/features/playerhud/PlayerHUD.tsx",[],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/features/toolbar/toolbarSlice.ts",["222","223","224","225"],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/features/playerhud/playerHUDSlice.ts",["226","227","228"],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/features/debugbar/debugbarSlice.ts",["229","230","231","232"],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/app/hooks.ts",[],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/game/index.ts",[],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/scenes/level-one.ts",["233"],"import nengi from \"nengi\";\nimport Phaser from \"phaser\";\nimport RequestSpawn from \"../../../common/command/RequestSpawn\";\nimport { ExtendedNengiTypes } from \"../../../common/types/custom-nengi-types\";\nimport { Sounds } from \"../../../common/types/types\";\nimport Simulator from \"../Simulator\";\nimport { store } from '../app/store'\nimport ModifyToolbarCommand from '../../../common/command/ModifyToolbarCommand'\nimport RequestRunDebugCommand from '../../../common/command/RequestRunDebugCommand'\nimport { REQUEST_DEBUG_COMMAND_TYPES } from \"../../../common/types/types\";\n\nexport class LevelOne extends Phaser.Scene {\n  map: Phaser.Tilemaps.Tilemap;\n  worldLayer: Phaser.Tilemaps.StaticTilemapLayer;\n  nengiClient: ExtendedNengiTypes.Client;\n  simulator: Simulator;\n  last_ts: number\n  levelName = \"zm_castle\";\n  store: typeof store\n  oldState:  ReturnType<typeof store.getState>\n\n  init = ({ nengiClient, storeRef }: { nengiClient: any, storeRef: typeof store }) => {\n    console.log(\"RUNNING INIT LEVEL_ONE\")\n\n    this.nengiClient = nengiClient;\n    this.store = storeRef\n    this.store.subscribe(() => this.stateUpdated())\n  }\n\n  public preload = () => {\n    console.log(\"Pre-load level one\")\n\n    this.load.image(\"player\", \"survivor-shotgun.png\");\n    this.load.image(\"zombie\", \"zombie.png\");\n    this.load.image(\"bullet\", \"bullet.png\");\n\n    this.load.image(\"tiles\", \"tuxmon-sample-32px-extruded.png\");\n    this.load.tilemapTiledJSON(this.levelName, \"zm_castle.json\");\n\n    this.load.audio(Sounds.BULLET, 'bullet.mp3');\n    this.load.audio(Sounds.ZOMBIE_BITE_ONE, 'zombie_bite_one.mp3');\n\n  }\n\n  stateUpdated = () => {\n    // console.log(\"stat eupdated\")\n    const newState = this.store.getState()\n    console.log(newState)\n\n    if (this.oldState?.toolbar?.selectedSlot && this.oldState.toolbar.selectedSlot !== newState.toolbar.selectedSlot) {\n      const ModToolbarCommand = new ModifyToolbarCommand(newState.toolbar.selectedSlot)\n      this.nengiClient.addCommand(ModToolbarCommand)\n    }\n    if (this.oldState?.debugBar?.killFlag && this.oldState?.debugBar?.killFlag  !== newState.debugBar.killFlag) {\n      const requestRunDebugCommand = new RequestRunDebugCommand(REQUEST_DEBUG_COMMAND_TYPES.KILL)\n      this.nengiClient.addCommand(requestRunDebugCommand)\n    }\n\n    this.oldState = newState\n  }\n\n  create = () => {\n\n    // this.load.audio(Sounds.BULLET);\n    // var music = this.scene.sound.add(Sounds.BULLET);\n\n    console.log(\"Create level one\")\n\n    this.map = this.make.tilemap({ key: this.levelName });\n\n    const tileset = this.map.addTilesetImage(\n      \"tuxmon-sample-32px-extruded\",\n      \"tiles\"\n    );\n\n    //@ts-ignore\n    this.map.createStaticLayer(\n      \"Below Player\",\n      tileset,\n      0,\n      0\n    );\n\n    //@ts-ignore\n    this.worldLayer = this.map.createStaticLayer(\"LevelOneWorld\", tileset, 0, 0);\n    // this.worldLayer.setCollisionByProperty({ collides: true });\n    this.simulator = new Simulator(this.nengiClient, this, this.map);\n\n\n    this.nengiClient.onConnect((res) => {\n      console.log(\"onConnect response:\", res);\n    });\n\n    this.nengiClient.onClose(() => {\n      console.log(\"connection closed\");\n    });\n\n    this.nengiClient.connect(\"ws://localhost:8079\");\n\n    console.log(\"Requesting to join game\")\n    const RequestSpawnCommand = new RequestSpawn(\"\")\n    console.log(RequestSpawnCommand)\n    this.nengiClient.addCommand(RequestSpawnCommand)\n  }\n\n  public update = () => {\n    // console.log(\"Running level one update\")\n    // console.log(this.map)\n    // Compute delta time since last update.\n    const now_ts = +new Date();\n    const last_ts = this.last_ts || now_ts;\n    const dt_sec = (now_ts - last_ts) / 1000.0;\n    this.last_ts = now_ts;\n\n    const network = this.nengiClient.readNetwork();\n\n    network.entities.forEach((snapshot: any) => {\n      snapshot.createEntities.forEach((entity: any) => {\n        // console.log(`creating new ${entity.protocol.name} entity `, entity)\n        this.simulator.createEntity(entity)\n      })\n\n      snapshot.updateEntities.forEach((update: any) => {\n        // console.log(`Updating entity ${update.nid}`)\n        this.simulator.updateEntity(update)\n      })\n\n      snapshot.deleteEntities.forEach((id: number) => {\n        // console.log(`Deleting entity `, id)\n        this.simulator.deleteEntity(id)\n      })\n    })\n\n    network.messages.forEach((message: any) => {\n      // console.log(`Recieved ${message.protocol.name} message:`, message);\n      this.simulator.processMessage(message)\n    });\n\n    // console.log(dt_sec)\n    this.simulator.update(dt_sec);\n    this.nengiClient.update();\n  }\n}\n","/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/Simulator.ts",["234","235"],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/InputSystem.ts",[],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/PhaserEntityRenderer.ts",[],"/home/wsl-tom/git/side-projects/2d-shooter-2020-nengi-phaser-demo/frontend/src/features/playerhud/GameStatusHUD.tsx",[],{"ruleId":"236","replacedBy":"237"},{"ruleId":"238","replacedBy":"239"},{"ruleId":"240","severity":1,"message":"241","line":78,"column":11,"nodeType":"242","messageId":"243","endLine":78,"endColumn":21},{"ruleId":"240","severity":1,"message":"244","line":1,"column":10,"nodeType":"242","messageId":"243","endLine":1,"endColumn":19},{"ruleId":"236","replacedBy":"245"},{"ruleId":"238","replacedBy":"246"},{"ruleId":"240","severity":1,"message":"247","line":7,"column":49,"nodeType":"242","messageId":"243","endLine":7,"endColumn":55},{"ruleId":"240","severity":1,"message":"248","line":13,"column":8,"nodeType":"242","messageId":"243","endLine":13,"endColumn":25},{"ruleId":"240","severity":1,"message":"249","line":14,"column":8,"nodeType":"242","messageId":"243","endLine":14,"endColumn":24},{"ruleId":"240","severity":1,"message":"248","line":8,"column":8,"nodeType":"242","messageId":"243","endLine":8,"endColumn":25},{"ruleId":"240","severity":1,"message":"249","line":9,"column":8,"nodeType":"242","messageId":"243","endLine":9,"endColumn":24},{"ruleId":"240","severity":1,"message":"250","line":2,"column":10,"nodeType":"242","messageId":"243","endLine":2,"endColumn":19},{"ruleId":"240","severity":1,"message":"251","line":1,"column":8,"nodeType":"242","messageId":"243","endLine":1,"endColumn":13},{"ruleId":"240","severity":1,"message":"252","line":3,"column":8,"nodeType":"242","messageId":"243","endLine":3,"endColumn":19},{"ruleId":"236","replacedBy":"253"},{"ruleId":"238","replacedBy":"254"},{"ruleId":"240","severity":1,"message":"251","line":1,"column":8,"nodeType":"242","messageId":"243","endLine":1,"endColumn":13},{"ruleId":"240","severity":1,"message":"255","line":6,"column":10,"nodeType":"242","messageId":"243","endLine":6,"endColumn":21},{"ruleId":"240","severity":1,"message":"256","line":1,"column":10,"nodeType":"242","messageId":"243","endLine":1,"endColumn":26},{"ruleId":"240","severity":1,"message":"257","line":1,"column":41,"nodeType":"242","messageId":"243","endLine":1,"endColumn":54},{"ruleId":"240","severity":1,"message":"258","line":2,"column":10,"nodeType":"242","messageId":"243","endLine":2,"endColumn":19},{"ruleId":"240","severity":1,"message":"259","line":2,"column":21,"nodeType":"242","messageId":"243","endLine":2,"endColumn":29},{"ruleId":"240","severity":1,"message":"260","line":1,"column":17,"nodeType":"242","messageId":"243","endLine":1,"endColumn":25},{"ruleId":"240","severity":1,"message":"256","line":1,"column":10,"nodeType":"242","messageId":"243","endLine":1,"endColumn":26},{"ruleId":"240","severity":1,"message":"258","line":3,"column":10,"nodeType":"242","messageId":"243","endLine":3,"endColumn":19},{"ruleId":"240","severity":1,"message":"259","line":3,"column":21,"nodeType":"242","messageId":"243","endLine":3,"endColumn":29},{"ruleId":"240","severity":1,"message":"260","line":1,"column":17,"nodeType":"242","messageId":"243","endLine":1,"endColumn":25},{"ruleId":"240","severity":1,"message":"261","line":3,"column":26,"nodeType":"242","messageId":"243","endLine":3,"endColumn":40},{"ruleId":"240","severity":1,"message":"256","line":1,"column":10,"nodeType":"242","messageId":"243","endLine":1,"endColumn":26},{"ruleId":"240","severity":1,"message":"258","line":3,"column":10,"nodeType":"242","messageId":"243","endLine":3,"endColumn":19},{"ruleId":"240","severity":1,"message":"259","line":3,"column":21,"nodeType":"242","messageId":"243","endLine":3,"endColumn":29},{"ruleId":"240","severity":1,"message":"260","line":1,"column":17,"nodeType":"242","messageId":"243","endLine":1,"endColumn":25},{"ruleId":"240","severity":1,"message":"261","line":3,"column":26,"nodeType":"242","messageId":"243","endLine":3,"endColumn":40},{"ruleId":"240","severity":1,"message":"256","line":1,"column":10,"nodeType":"242","messageId":"243","endLine":1,"endColumn":26},{"ruleId":"240","severity":1,"message":"257","line":1,"column":41,"nodeType":"242","messageId":"243","endLine":1,"endColumn":54},{"ruleId":"240","severity":1,"message":"258","line":2,"column":10,"nodeType":"242","messageId":"243","endLine":2,"endColumn":19},{"ruleId":"240","severity":1,"message":"259","line":2,"column":21,"nodeType":"242","messageId":"243","endLine":2,"endColumn":29},{"ruleId":"240","severity":1,"message":"260","line":1,"column":17,"nodeType":"242","messageId":"243","endLine":1,"endColumn":25},{"ruleId":"240","severity":1,"message":"262","line":7,"column":9,"nodeType":"242","messageId":"243","endLine":7,"endColumn":21},{"ruleId":"236","replacedBy":"263"},{"ruleId":"238","replacedBy":"264"},{"ruleId":"240","severity":1,"message":"250","line":2,"column":10,"nodeType":"242","messageId":"243","endLine":2,"endColumn":19},{"ruleId":"240","severity":1,"message":"260","line":1,"column":17,"nodeType":"242","messageId":"243","endLine":1,"endColumn":25},{"ruleId":"240","severity":1,"message":"260","line":1,"column":17,"nodeType":"242","messageId":"243","endLine":1,"endColumn":25},{"ruleId":"240","severity":1,"message":"262","line":7,"column":9,"nodeType":"242","messageId":"243","endLine":7,"endColumn":21},{"ruleId":"240","severity":1,"message":"256","line":1,"column":10,"nodeType":"242","messageId":"243","endLine":1,"endColumn":26},{"ruleId":"240","severity":1,"message":"257","line":1,"column":41,"nodeType":"242","messageId":"243","endLine":1,"endColumn":54},{"ruleId":"240","severity":1,"message":"258","line":2,"column":10,"nodeType":"242","messageId":"243","endLine":2,"endColumn":19},{"ruleId":"240","severity":1,"message":"259","line":2,"column":21,"nodeType":"242","messageId":"243","endLine":2,"endColumn":29},{"ruleId":"240","severity":1,"message":"256","line":1,"column":10,"nodeType":"242","messageId":"243","endLine":1,"endColumn":26},{"ruleId":"240","severity":1,"message":"258","line":3,"column":10,"nodeType":"242","messageId":"243","endLine":3,"endColumn":19},{"ruleId":"240","severity":1,"message":"259","line":3,"column":21,"nodeType":"242","messageId":"243","endLine":3,"endColumn":29},{"ruleId":"240","severity":1,"message":"256","line":1,"column":10,"nodeType":"242","messageId":"243","endLine":1,"endColumn":26},{"ruleId":"240","severity":1,"message":"257","line":1,"column":41,"nodeType":"242","messageId":"243","endLine":1,"endColumn":54},{"ruleId":"240","severity":1,"message":"258","line":2,"column":10,"nodeType":"242","messageId":"243","endLine":2,"endColumn":19},{"ruleId":"240","severity":1,"message":"259","line":2,"column":21,"nodeType":"242","messageId":"243","endLine":2,"endColumn":29},{"ruleId":"240","severity":1,"message":"251","line":1,"column":8,"nodeType":"242","messageId":"243","endLine":1,"endColumn":13},{"ruleId":"240","severity":1,"message":"265","line":7,"column":23,"nodeType":"242","messageId":"243","endLine":7,"endColumn":33},{"ruleId":"240","severity":1,"message":"247","line":7,"column":49,"nodeType":"242","messageId":"243","endLine":7,"endColumn":55},"no-native-reassign",["266"],"no-negated-in-lhs",["267"],"@typescript-eslint/no-unused-vars","'belowLayer' is assigned a value but never used.","Identifier","unusedVar","'ArrowKeys' is defined but never used.",["266"],["267"],"'Sounds' is defined but never used.","'ZombieWaveMessage' is defined but never used.","'ClientHudMessage' is defined but never used.","'clientFPS' is defined but never used.","'nengi' is defined but never used.","'nengiConfig' is defined but never used.",["266"],["267"],"'SCENE_NAMES' is defined but never used.","'createAsyncThunk' is defined but never used.","'PayloadAction' is defined but never used.","'RootState' is defined but never used.","'AppThunk' is defined but never used.","'useState' is defined but never used.","'useAppDispatch' is defined but never used.","'debuggerInfo' is assigned a value but never used.",["266"],["267"],"'lobbyState' is defined but never used.","no-global-assign","no-unsafe-negation"]